module clk_div(clk_d, clk);
  parameter div_value = 1;
  output clk_d;
  input clk;

  reg clk_d;
  reg count;

  initial
    begin
      clk_d = 0;
      count = 0;
    end

  always @ (posedge clk)
    begin
      if (count == div_value)
        count <= 0;
      else
        count <= count + 1;
    end

  always @ (posedge clk)
    begin
      if (count == div_value)
        clk_d <= ~clk_d;
    end
endmodule

module h_counter(h_count, trig_v, clk);
  output [9:0] h_count;
  output trig_v;
  input clk;

  reg [9:0] h_count;
  reg trig_v;

  initial h_count = 0;
  initial trig_v = 0;

  always @ (posedge clk)
    begin
      if (h_count < 799)
        begin
          h_count <= h_count + 1;
          trig_v = 0;
        end
      else
        begin
          h_count <= 0;
          trig_v = 1;
        end
    end
endmodule
